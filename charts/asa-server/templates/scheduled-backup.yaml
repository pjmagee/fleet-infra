{{- if and .Values.backup.enabled .Values.backup.schedule (ne .Values.backup.schedule "") }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "asa-server.fullname" . }}-scheduled-backup
  labels:
    {{- include "asa-server.labels" . | nindent 4 }}
    app.kubernetes.io/component: scheduled-backup
spec:
  schedule: {{ .Values.backup.schedule | quote }}
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "asa-server.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: scheduled-backup
        spec:
          restartPolicy: OnFailure
          containers:
            - name: scheduled-backup
              image: alpine:latest
              command: ["/bin/sh", "-c"]
              args:
                - |
                  apk add --no-cache tar gzip
                  
                  BACKUP_DATE=$(date +"%Y%m%d-%H%M%S")
                  
                  # Determine if this is a scheduled backup or manual backup
                  # Manual backups are created with job name containing "manual"
                  if echo "$HOSTNAME" | grep -q "manual" || echo "${JOB_NAME:-}" | grep -q "manual"; then
                    BACKUP_TYPE="manual"
                    BACKUP_DIR="/host-backups/manual/ark-server-backup-${BACKUP_DATE}"
                    echo "=== ARK Server Manual Backup Started ==="
                  else
                    BACKUP_TYPE="scheduled"
                    BACKUP_DIR="/host-backups/scheduled/ark-server-${BACKUP_DATE}"
                    echo "=== ARK Server Scheduled Backup Started ==="
                  fi
                  
                  echo "Backup Date: $(date)"
                  echo "Backup Directory: ${BACKUP_DIR}"
                  mkdir -p "${BACKUP_DIR}"
                  
                  # Backup 1: ARK Saves (world data, player data, etc.)
                  echo "Backing up ARK saves..."
                  if [ -d "/ark/binaries/ShooterGame/Saved" ]; then
                      tar -czf "${BACKUP_DIR}/ark-saves.tar.gz" -C /ark/binaries/ShooterGame/Saved . \
                        --exclude='*.tmp' --exclude='*.lock' --exclude='Logs/ShooterGame-backup-*'
                      echo "Saves backup size: $(du -h ${BACKUP_DIR}/ark-saves.tar.gz | cut -f1)"
                  else
                      echo "WARNING: No saves directory found at /ark/binaries/ShooterGame/Saved"
                  fi
                  
                  # Backup 2: ARK Plugins/Mods (if any)
                  echo "Backing up ARK plugins/mods..."
                  if [ -d "/ark/binaries/ShooterGame/Plugins" ] && [ "$(ls -A /ark/binaries/ShooterGame/Plugins 2>/dev/null)" ]; then
                      tar -czf "${BACKUP_DIR}/ark-plugins.tar.gz" -C /ark/binaries/ShooterGame/Plugins .
                      echo "Plugins backup size: $(du -h ${BACKUP_DIR}/ark-plugins.tar.gz | cut -f1)"
                  else
                      echo "No plugins/mods found to backup"
                      touch "${BACKUP_DIR}/no-plugins.txt"
                  fi
                  
                  # Backup 3: Configuration files (only if they have content)
                  echo "Backing up configuration files..."
                  mkdir -p "${BACKUP_DIR}/config"
                  
                  # Check for Game.ini with content
                  if [ -f "/ark/instance/Game.ini" ] && [ -s "/ark/instance/Game.ini" ]; then
                      cp "/ark/instance/Game.ini" "${BACKUP_DIR}/config/"
                      echo "Game.ini backed up ($(wc -l < /ark/instance/Game.ini) lines)"
                  else
                      echo "Game.ini not found or empty"
                  fi
                  
                  # Check for GameUserSettings.ini with content  
                  if [ -f "/ark/instance/GameUserSettings.ini" ] && [ -s "/ark/instance/GameUserSettings.ini" ]; then
                      cp "/ark/instance/GameUserSettings.ini" "${BACKUP_DIR}/config/"
                      echo "GameUserSettings.ini backed up ($(wc -l < /ark/instance/GameUserSettings.ini) lines)"
                  else
                      echo "GameUserSettings.ini not found or empty"
                  fi
                  
                  # Create backup metadata
                  cat > "${BACKUP_DIR}/backup-metadata.json" << EOF
                  {
                    "backupDate": "$(date -Iseconds)",
                    "backupType": "${BACKUP_TYPE}",
                    "serverName": "{{ .Values.server.serverName }}",
                    "mapName": "{{ .Values.server.mapName }}",
                    "saveDir": "{{ .Values.server.saveDir }}",
                    "files": {
                      "saves": "ark-saves.tar.gz",
                      "plugins": "ark-plugins.tar.gz",
                      "config": "config/"
                    },
                    "sizes": {
                      "saves": "$(du -h ${BACKUP_DIR}/ark-saves.tar.gz 2>/dev/null | cut -f1 || echo 'N/A')",
                      "plugins": "$(du -h ${BACKUP_DIR}/ark-plugins.tar.gz 2>/dev/null | cut -f1 || echo 'N/A')",
                      "total": "$(du -sh ${BACKUP_DIR} | cut -f1)"
                    }
                  }
                  EOF
                  
                  echo "=== Backup Summary ==="
                  cat "${BACKUP_DIR}/backup-metadata.json"
                  echo "=== Backup Completed Successfully ==="
                  
                  # Cleanup old backups (only for scheduled backups, keep manual backups)
                  if [ "$BACKUP_TYPE" = "scheduled" ]; then
                    echo "Cleaning up old scheduled backups..."
                    cd /host-backups/scheduled
                    ls -t ark-server-* 2>/dev/null | tail -n +{{ add .Values.backup.retention 1 }} | xargs -r rm -rf
                    echo "Cleanup completed."
                  else
                    echo "Manual backup completed - no cleanup performed"
                  fi
              env:
                - name: TZ
                  value: {{ .Values.timezone | default "UTC" | quote }}
              volumeMounts:
                - name: ark-instance
                  mountPath: /ark/instance
                  readOnly: true
                - name: ark-binaries  
                  mountPath: /ark/binaries
                  readOnly: true
                - name: host-backup-dir
                  mountPath: /host-backups
          volumes:
            - name: ark-instance
              persistentVolumeClaim:
                claimName: ark-instance-{{ include "asa-server.fullname" . }}-0
            - name: ark-binaries
              persistentVolumeClaim:
                claimName: ark-binaries-{{ include "asa-server.fullname" . }}-0
            - name: host-backup-dir
              hostPath:
                path: {{ .Values.backup.hostPath | default "/run/desktop/mnt/host/d/ark-backups" }}
                type: DirectoryOrCreate
{{- end }}
