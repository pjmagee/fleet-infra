apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "asa-server.fullname" . }}-scripts
  labels:
    {{- include "asa-server.labels" . | nindent 4 }}
data:
  ark-status.sh: |
    #!/bin/bash
    echo "=== ARK Server Status ==="
    echo "Server Process: $(pgrep -f ArkAscendedServer.exe > /dev/null && echo 'RUNNING' || echo 'STOPPED')"
    echo "Uptime: $(ps -o etime= -p $(pgrep -f ArkAscendedServer.exe) 2>/dev/null | tr -d ' ' || echo 'N/A')"
    echo "Memory Usage: $(ps -o %mem= -p $(pgrep -f ArkAscendedServer.exe) 2>/dev/null | tr -d ' ' || echo 'N/A')%"
    echo "Save File: $(ls -lh /ark/binaries/ShooterGame/Saved/{{ .Values.server.saveDir }}/{{ .Values.server.mapName }}/*.ark 2>/dev/null | tail -1 || echo 'Not found')"

  ark-backup.sh: |
    #!/bin/bash
    echo "=== Manual ARK Backup ==="
    BACKUP_DIR="/ark/instance/backups/$(date +%Y-%m-%d_%H-%M-%S)"
    mkdir -p "$BACKUP_DIR"
    
    # Backup save files
    if [ -d "/ark/binaries/ShooterGame/Saved" ]; then
        echo "Backing up save files..."
        tar -czf "$BACKUP_DIR/saves.tar.gz" -C /ark/binaries/ShooterGame/Saved .
        echo "Save files backed up: $(du -h $BACKUP_DIR/saves.tar.gz | cut -f1)"
    fi
    
    # Backup config
    tar -czf "$BACKUP_DIR/config.tar.gz" -C /ark/instance Game.ini GameUserSettings.ini 2>/dev/null
    echo "Backup completed in: $BACKUP_DIR"
    ls -la "$BACKUP_DIR"

  ark-players.sh: |
    #!/bin/bash
    echo "=== Player Management ==="
    echo "Note: Use RCON for player commands:"
    echo "Example commands:"
    echo "  rcon-cli -H localhost -p {{ .Values.server.ports.rcon }} -P \$ADMIN_PASSWORD listplayers"
    echo "  rcon-cli -H localhost -p {{ .Values.server.ports.rcon }} -P \$ADMIN_PASSWORD broadcast 'Server restart in 5 minutes'"
    echo "  rcon-cli -H localhost -p {{ .Values.server.ports.rcon }} -P \$ADMIN_PASSWORD saveworld"

  ark-logs.sh: |
    #!/bin/bash
    echo "=== ARK Server Logs ==="
    echo "Recent game log:"
    tail -50 /ark/binaries/ShooterGame/Saved/Logs/ShooterGame.log 2>/dev/null || echo "No game log found"
    
    echo -e "\nRecent container logs:"
    echo "Use: kubectl logs asa-server-0 -n asa-server --tail=50"

  ark-restart.sh: |
    #!/bin/bash
    echo "=== ARK Server Restart ==="
    echo "Warning: This will restart the entire pod"
    echo "Use: kubectl delete pod asa-server-0 -n asa-server"
    echo "StatefulSet will automatically recreate the pod"

  ark-update.sh: |
    #!/bin/bash
    echo "=== ARK Server Update ==="
    echo "To update ARK server:"
    echo "1. kubectl exec -it asa-server-0 -n asa-server -- /entrypoint.sh update"
    echo "2. Or restart pod to trigger update during init"
